// Generated by CoffeeScript 1.7.1
(function() {
  var Node, Number_, oneOf, randomElement, randomInt, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Node = require('../node');

  oneOf = require('../combinators').oneOf;

  _ref = require('../random'), randomInt = _ref.randomInt, randomElement = _ref.randomElement;

  Number_ = (function(_super) {
    __extends(Number_, _super);

    Number_.prototype.type = 'Literal';

    function Number_() {
      (oneOf([
        (function(_this) {
          return function() {
            _this.value = 0;
            return _this.formatInt();
          };
        })(this), (function(_this) {
          return function() {
            _this.value = randomInt(1000);
            return _this.formatInt();
          };
        })(this), (function(_this) {
          return function() {
            _this.value = randomInt(100 * 1000);
            return _this.formatInt();
          };
        })(this)
      ]))();
    }

    Number_.prototype.formatInt = function() {
      switch (randomInt(10)) {
        case 0:
          return this.raw = "" + (randomElement(['0', '00', '000', '0000'])) + (this.value.toString(8));
        case 1:
          return this.raw = "0" + (randomElement(['x', 'X'])) + (this.value.toString(16));
        case 3:
          return this.raw = "" + this.value + ".";
      }
    };

    return Number_;

  })(Node);

  module.exports = function() {
    return new Number_;
  };

}).call(this);
